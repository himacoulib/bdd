package ml.satgrie.pl.ue.model;
// Generated 31 mars 2021 ï¿½ 17:28:15 by Hibernate Tools 5.2.12.Final

import java.math.BigDecimal;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Locale;
import java.util.Set;

import javax.persistence.Cacheable;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;

import ml.satgrie.pl.ue.services.ProjetViewService;

/**
 * Projet generated by hbm2java
 */
@Entity
@Table(name = "projet", catalog = "lastuebdd")

public class Projet implements java.io.Serializable {

	private Integer projetId;
	private Chapitre chapitre;
	private Utilisateur utilisateur;
	private String projetTitre;
	private String projetNumContrat;
	private Integer projetSourceFinancementId;
	private Integer projetInstrumentFinancementId;
	private String projetObjectifGeneraux;
	private String projetObjectifSpecifiques;
	private String projetResultatsPrevus;
	private Integer projetSecteurId;
	private Integer projetSousSecteurId;
	private String projetDescription;
	private BigDecimal projetBudget;
	private Integer lastModifiedBy;
	private Date lastModifiedDate;
	private Set<Calendrier> calendriers = new HashSet<Calendrier>(0);
	private Set<Pointfocal> pointfocals = new HashSet<Pointfocal>(0);
	private Set<Photo> photos = new HashSet<Photo>(0);
	private Set<Contractant> contractants = new HashSet<Contractant>(0);
	private List<Budget> budgets = new ArrayList<Budget>(0);
	private Set<Etatavancement> etatavancements = new HashSet<Etatavancement>(0);

	public Projet() {
	}

	public Projet(Chapitre chapitre, Utilisateur utilisateur, String projetTitre, String projetNumContrat,
			Integer projetSourceFinancementId, Integer projetInstrumentFinancementId, String projetObjectifGeneraux,
			String projetObjectifSpecifiques, String projetResultatsPrevus, Integer projetSecteurId,
			Integer projetSousSecteurId, String projetDescription, BigDecimal projetBudget, Integer lastModifiedBy,
			Date lastModifiedDate, Set<Calendrier> calendriers, Set<Pointfocal> pointfocals, Set<Photo> photos,
			Set<Contractant> contractants, List<Budget> budgets, Set<Etatavancement> etatavancements) {
		this.chapitre = chapitre;
		this.utilisateur = utilisateur;
		this.projetTitre = projetTitre;
		this.projetNumContrat = projetNumContrat;
		this.projetSourceFinancementId = projetSourceFinancementId;
		this.projetInstrumentFinancementId = projetInstrumentFinancementId;
		this.projetObjectifGeneraux = projetObjectifGeneraux;
		this.projetObjectifSpecifiques = projetObjectifSpecifiques;
		this.projetResultatsPrevus = projetResultatsPrevus;
		this.projetSecteurId = projetSecteurId;
		this.projetSousSecteurId = projetSousSecteurId;
		this.projetDescription = projetDescription;
		this.projetBudget = projetBudget;
		this.lastModifiedBy = lastModifiedBy;
		this.lastModifiedDate = lastModifiedDate;
		this.calendriers = calendriers;
		this.pointfocals = pointfocals;
		this.photos = photos;
		this.contractants = contractants;
		this.budgets = budgets;
		this.etatavancements = etatavancements;
	}

	
	@Id

	@Column(name = "ProjetID", unique = true, nullable = false)
	public Integer getProjetId() {
		return this.projetId;
	}

	public void setProjetId(Integer projetId) {
		this.projetId = projetId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "ChapitreID")
	@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
	public Chapitre getChapitre() {
		return this.chapitre;
	}

	public void setChapitre(Chapitre chapitre) {
		this.chapitre = chapitre;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "UtilisateurID")
	@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
	public Utilisateur getUtilisateur() {
		return this.utilisateur;
	}

	public void setUtilisateur(Utilisateur utilisateur) {
		this.utilisateur = utilisateur;
	}

	@Column(name = "ProjetTitre", length = 1250)
	public String getProjetTitre() {
		return this.projetTitre;
	}

	public void setProjetTitre(String projetTitre) {
		this.projetTitre = projetTitre;
	}

	@Column(name = "ProjetNumContrat", length = 250)
	public String getProjetNumContrat() {
		return this.projetNumContrat;
	}

	public void setProjetNumContrat(String projetNumContrat) {
		this.projetNumContrat = projetNumContrat;
	}

	@Column(name = "ProjetSourceFinancementID")
	public Integer getProjetSourceFinancementId() {
		return this.projetSourceFinancementId;
	}

	public void setProjetSourceFinancementId(Integer projetSourceFinancementId) {
		this.projetSourceFinancementId = projetSourceFinancementId;
	}

	@Column(name = "ProjetInstrumentFinancementID")
	public Integer getProjetInstrumentFinancementId() {
		return this.projetInstrumentFinancementId;
	}

	public void setProjetInstrumentFinancementId(Integer projetInstrumentFinancementId) {
		this.projetInstrumentFinancementId = projetInstrumentFinancementId;
	}

	@Column(name = "ProjetObjectifGeneraux")
	public String getProjetObjectifGeneraux() {
		return this.projetObjectifGeneraux;
	}

	public void setProjetObjectifGeneraux(String projetObjectifGeneraux) {
		this.projetObjectifGeneraux = projetObjectifGeneraux;
	}

	@Column(name = "ProjetObjectifSpecifiques")
	public String getProjetObjectifSpecifiques() {
		return this.projetObjectifSpecifiques;
	}

	public void setProjetObjectifSpecifiques(String projetObjectifSpecifiques) {
		this.projetObjectifSpecifiques = projetObjectifSpecifiques;
	}

	@Column(name = "ProjetResultatsPrevus")
	public String getProjetResultatsPrevus() {
		return this.projetResultatsPrevus;
	}

	public void setProjetResultatsPrevus(String projetResultatsPrevus) {
		this.projetResultatsPrevus = projetResultatsPrevus;
	}

	@Column(name = "ProjetSecteurID")
	public Integer getProjetSecteurId() {
		return this.projetSecteurId;
	}

	public void setProjetSecteurId(Integer projetSecteurId) {
		this.projetSecteurId = projetSecteurId;
	}

	@Column(name = "ProjetSousSecteurID")
	public Integer getProjetSousSecteurId() {
		return this.projetSousSecteurId;
	}

	public void setProjetSousSecteurId(Integer projetSousSecteurId) {
		this.projetSousSecteurId = projetSousSecteurId;
	}

	@Column(name = "ProjetDescription")
	public String getProjetDescription() {
		return this.projetDescription;
	}

	public void setProjetDescription(String projetDescription) {
		this.projetDescription = projetDescription;
	}

	@Column(name = "ProjetBudget", precision = 22, scale = 0)
	public BigDecimal getProjetBudget() {
		return this.projetBudget;
	}

	public void setProjetBudget(BigDecimal projetBudget) {
		this.projetBudget = projetBudget;
	}
	

	@Column(name = "LastModifiedBy")
	public Integer getLastModifiedBy() {
		return this.lastModifiedBy;
	}

	public void setLastModifiedBy(Integer lastModifiedBy) {
		this.lastModifiedBy = lastModifiedBy;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "LastModifiedDate", length = 19)
	public Date getLastModifiedDate() {
		return this.lastModifiedDate;
	}

	public void setLastModifiedDate(Date lastModifiedDate) {
		this.lastModifiedDate = lastModifiedDate;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "projet")
	@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
	public Set<Calendrier> getCalendriers() {
		return this.calendriers;
	}

	public void setCalendriers(Set<Calendrier> calendriers) {
		this.calendriers = calendriers;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "projet")
	@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
	public Set<Pointfocal> getPointfocals() {
		return this.pointfocals;
	}

	public void setPointfocals(Set<Pointfocal> pointfocals) {
		this.pointfocals = pointfocals;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "projet")
	@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
	public Set<Photo> getPhotos() {
		return this.photos;
	}

	public void setPhotos(Set<Photo> photos) {
		this.photos = photos;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "projet")
	@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
	public Set<Contractant> getContractants() {
		return this.contractants;
	}

	public void setContractants(Set<Contractant> contractants) {
		this.contractants = contractants;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "projet")
	@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
	public List<Budget> getBudgets() {
		return this.budgets;
	}

	public void setBudgets(List<Budget> budgets) {
		this.budgets = budgets;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "projet")
	@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
	public Set<Etatavancement> getEtatavancements() {
		return this.etatavancements;
	}

	public void setEtatavancements(Set<Etatavancement> etatavancements) {
		this.etatavancements = etatavancements;
	}

	
}
